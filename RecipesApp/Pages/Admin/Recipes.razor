@page "/admin/recipes"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Creator</th>
			<th>Recipe Category</th>
			<th>Recipe Name</th>
			<td />
		</tr>
	</thead>
	<tbody>
		@if (RecipeData?.Count() > 0)
		{
			@foreach (Recipe o in RecipeData)
			{
				<tr>
					<td>@o.RecipeID</td>
					<td>@o.RecipeCreator</td>
					<td>@o.RecipeCategory</td>
					<td>@o.RecipeName</td>
					<td>
						<NavLink class="btn btn-info btn-sm"
						 href="@GetDetailsUrl(o.RecipeID ?? 0)">
							Details
						</NavLink>
						<NavLink class="btn btn-warning btn-sm"
						 href="@GetEditUrl(o.RecipeID ?? 0)">
							Edit
						</NavLink>
						<button class="btn btn-danger btn-sm"
						@onclick="@(e => DeleteRecipe(o))">
							Delete
						</button>
					</td>
				</tr>
			}
		}
		else
		{
			<tr><td colspan="5" class="text-center">No Recipes</td></tr>
		}
	</tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/recipes/create">Create</NavLink>

@code {
	public IStoreRepository Repository => Service;
	public IEnumerable<Recipe> RecipeData { get; set; } = Enumerable.Empty<Recipe>();

	protected async override Task OnInitializedAsync()
	{
		await UpdateData();
	}
	public async Task UpdateData()
	{
		RecipeData = await Repository.Recipes.ToListAsync();
	}
	public async Task DeleteRecipe(Recipe p) 
	{
		Repository.DeleteRecipe(p);
		await UpdateData();
	}
	public string GetDetailsUrl(long id) => $"/admin/recipes/details/{id}";
	public string GetEditUrl(long id) => $"/admin/recipes/edit/{id}";
}